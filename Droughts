Temperature Vegetation Dryness Index (TVDI)

The Temperature Vegetation Dryness Index (TVDI) is calculated using the Enhanced Vegetation Index (EVI) and land surface temperature.

TVDI is a spectral index that combines vegetation health information from EVI with temperature data to assess vegetation stress due to dryness or drought conditions.

Formula
The formula for calculating TVDI involves the following steps:

Calculation of EVI: Enhanced Vegetation Index is computed using near-infrared, red, and blue bands.
Calculation of Land Surface Temperature (LST): LST is derived from thermal infrared bands.
Normalization of LST: Land surface temperature is normalized between 0 and 1.
TVDI Calculation: TVDI is computed by subtracting normalized LST from EVI.
TVDI
=
EVI
−
Normalized LST
TVDI=EVI−Normalized LST

Application
TVDI is widely used for:

Assessment of Vegetation Stress: TVDI values indicate the degree of vegetation water stress, with lower values suggesting increased stress.
Drought Monitoring: TVDI helps in monitoring drought conditions by detecting areas where vegetation is experiencing water shortage.
Environmental Management: TVDI supports decision-making in agriculture, water resource management, and land-use planning by providing insights into vegetation health and drought conditions.
Example Calculation in Google Earth Engine
Here's how you can calculate TVDI using EVI and land surface temperature data in Google Earth Engine:

//cloud mask
function maskL8sr(image) {
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
  var cloudShadowBitMask = (1 << 3);
  var cloudsBitMask = (1 << 5);
  // Get the pixel QA band.
  var qa = image.select('pixel_qa');
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                 .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return image.updateMask(mask);
}

//vis params
var vizParams = {
  bands: ['B5', 'B6', 'B4'],
  min: 0,
  max: 4000,
  gamma: [1, 0.9, 1.1]
};
var vizParams2 = {
  bands: ['B4', 'B3', 'B2'],
  min: 0,
  max: 3000,
  gamma: 1.4,
};

//load the collection:
{
var col = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
.map(maskL8sr)
.filterDate('2019-03-16','2019-03-20')
.filterBounds(geometry);
}
print(col, 'coleccion');

//median
{
var image = col.median().clip(geometry);
print(image, 'image');
Map.addLayer(image, vizParams2);
}

// NDVI:
//{
//var ndvi = image.normalizedDifference(['B5', 'B4']).rename('NDVI');
//var ndviParams = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
//print(ndvi,'ndvi');
//Map.addLayer(ndvi, ndviParams, 'ndvi');
//}

{
  var ndvi = image.expression(
    '2.5 * ((NIR-RED) / (NIR +6 * RED -7.5* BLUE))', {
      'NIR':image.select('B5'),
      'RED':image.select('B4'),
      'BLUE':image.select('B2')
});
var ndviParams = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
print(ndvi,'ndvi');
Map.addLayer(ndvi, ndviParams, 'ndvi');
}

//

//select thermal band 10(with brightness tempereature), no BT calculation 
 var thermal= image.select('B10').multiply(0.1);
 
 /*{
var min = ee.Number(thermal.reduceRegion({
   reducer: ee.Reducer.min(),
   geometry: geometry,
   scale: 30,
   maxPixels: 1e9
   }).values().get(0));
print(min, 'min');
var max = ee.Number(thermal.reduceRegion({
    reducer: ee.Reducer.max(),
   geometry: geometry,
   scale: 30,
   maxPixels: 1e9
   }).values().get(0));
print(max, 'max')
}*/
 var b10Params = {min: 2878000, max: 3046000, palette: ['blue', 'white', 'green']};
 Map.addLayer(thermal, b10Params, 'thermal');


// find the min and max of NDVI
{
var min = ee.Number(ndvi.reduceRegion({
   reducer: ee.Reducer.min(),
   geometry: geometry,
   scale: 30,
   maxPixels: 1e9
   }).values().get(0));
print(min, 'min');
var max = ee.Number(ndvi.reduceRegion({
    reducer: ee.Reducer.max(),
   geometry: geometry,
   scale: 30,
   maxPixels: 1e9
   }).values().get(0));
print(max, 'max')
}

//fractional vegetation
{
var fv = ndvi.subtract(min).divide(max.subtract(min)).rename('FV'); 
print(fv, 'fv');
//Map.addLayer(fv);
}

/////////////


//Emissivity para Landsat 8. Para Landsat 5, "a"=0.978 Li(2004)
//reever var a y b- Segun rodriguez a= 0.985 y b= 0.978
  var a= ee.Number(0.004);
  var b= ee.Number(0.986);
  var EM=fv.multiply(a).add(b).rename('EMM');
  
  /*{
var min = ee.Number(EM.reduceRegion({
   reducer: ee.Reducer.min(),
   geometry: geometry,
   scale: 30,
   maxPixels: 1e9
   }).values().get(0));
print(min, 'min');
var max = ee.Number(EM.reduceRegion({
    reducer: ee.Reducer.max(),
   geometry: geometry,
   scale: 30,
   maxPixels: 1e9
   }).values().get(0));
print(max, 'max')
}*/
  var imageVisParam2 = {min: 0.98, max: 0.99, palette: ['blue', 'white', 'green']};
  Map.addLayer(EM, imageVisParam2,'EMM');

var LST = thermal.expression(
    '(Tb/(1 + (0.001145* (Tb / 1.438))*log(Ep)))-273.15', {
      'Tb': thermal.select('B10'),
      'Ep': EM.select('EMM')
});
  //LST c,d,f, p1, p2, p3 are assigned variables to write equaton easily
/*  var c= ee.Number(1);
  var d= ee.Number(0.00115);
  var f= ee.Number(1.4388);


var p1= ee.Number(thermal.multiply(d).divide(f));
var p2= ee.Number(Math.log(EM));
var p3= ee.Number(p1.multiply(p2).add(c));


var LST= (thermal.divide(p3)).rename('LST');

var LSTimage = ee.Image(LST);*/
{
var min = ee.Number(LST.reduceRegion({
   reducer: ee.Reducer.min(),
   geometry: geometry,
   scale: 30,
   maxPixels: 1e9
   }).values().get(0));
print(min, 'min');
var max = ee.Number(LST.reduceRegion({
    reducer: ee.Reducer.max(),
   geometry: geometry,
   scale: 30,
   maxPixels: 1e9
   }).values().get(0));
print(max, 'max')
}

Map.addLayer(LST, {min: 15, max: 32, palette: ['white', 'red']},'LST');



////
Export.image.toDrive({
  image: ndvi,
  description: 'NDVI',
  scale: 30,
  region: geometry,
  fileFormat: 'GeoTIFF',
  formatOptions: {
    cloudOptimized: true
  }
});


////
Export.image.toDrive({
  image: LST,
  description: 'LST',
  scale: 100,
  region: geometry,
  fileFormat: 'GeoTIFF',
  formatOptions: {
    cloudOptimized: true
  }
});

References
Xu, T., & Hutchinson, M. F. (2013). New developments and applications in the ANUCLIM spatial climatic and bioclimatic modelling package. Environmental Modelling & Software, 40, 267-279.
Huete, A. R., & Liu, H. Q. (1994). An error and sensitivity analysis of the atmospheric- and soil-correcting variants of the NDVI for the MODIS-EOS. IEEE Transactions on Geoscience and Remote Sensing, 32(4), 897-905.
TVDI provides valuable insights into vegetation health and water stress conditions, aiding in environmental monitoring and management efforts.
